#!/usr/bin/sh

set -xe

NAME=amity
ROOT_DIR=~
APP_DIR=$ROOT_DIR/$NAME
LOG_DIR=$APP_DIR/log
LOG_PATH=$LOG_DIR/$NAME.log

ACTION=$1

# This script is idempotent.

# Perform overall setup if not asked to perform a specific action

if [ -z ${ACTION} ]; then

sudo apt update
sudo apt install -y git vim
sudo apt install -y build-essential python3-dev
sudo apt install -y libglib2.0-dev
sudo apt install -y libgl1 libegl1

# Prevent keyboard power keys from rebooting or shutting down the machine
if [ ! -f /etc/systemd/logind.conf.d/disable-power-key.conf ]; then
    sudo mkdir -p /etc/systemd/logind.conf.d/
    TEMP_CONF_PATH=`mktemp`
    chmod 644 $TEMP_CONF_PATH
cat > "$TEMP_CONF_PATH" << EOF
[Login]
HandlePowerKey=ignore
EOF
    sudo cp $TEMP_CONF_PATH /etc/systemd/logind.conf.d/disable-power-key.conf
    sudo systemctl restart systemd-logind
fi

# App setup

cd "$ROOT_DIR"

if [ ! -d "$APP_DIR" ]; then
    git clone https://github.com/retsyx/amity $NAME
    # Setup a venv
    python -m venv "$APP_DIR"
else
    cd $APP_DIR
    git pull
    cd ..
fi

mkdir -p "$LOG_DIR"

cd "$LOG_DIR"

# Activate venv, and pip install requirements
cd "$APP_DIR"

. ./bin/activate
pip install --upgrade -r requirements.txt

# Clone, build, and install our custom version of bluepy
cd "$ROOT_DIR"
if [ ! -d "$ROOT_DIR/bluepy" ]; then
    git clone https://github.com/retsyx/bluepy
else
    cd bluepy
    git pull
    cd ..
fi

cd bluepy
python ./setup.py install

cd "$APP_DIR"

# Warm up pycache
python -c "import cec, gestures, hdmi, messaing, remote, tools, ui"

fi # End overall setup

cd "$APP_DIR"

# Startup setup

RUN_PATH="$APP_DIR/bin/run-$NAME.sh"

cat > "$RUN_PATH" << EOF
#!/usr/bin/sh

cd "$APP_DIR"
. ./bin/activate

echo Running...
$APP_DIR/main.py
EOF

chmod +x "$RUN_PATH"

mkdir -p ~/.config/systemd/user

cat > ~/.config/systemd/user/$NAME.service << EOF
[Unit]
Description=$NAME HDMI-CEC controller

[Service]
ExecStart=$RUN_PATH
Restart=always
WorkingDirectory=$APP_DIR

[Install]
WantedBy=default.target
EOF

loginctl enable-linger

if [ "$ACTION" = "enable" ]; then

systemctl --user start "$NAME"
systemctl --user enable "$NAME"

fi # "$ACTION" = "enable"

if [ "$ACTION" = "disable" ]; then

systemctl --user stop "$NAME"
systemctl --user disable "$NAME"

fi # "$ACTION" = "disable"
