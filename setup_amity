#!/usr/bin/bash

set -xe

NAME=amity
ROOT_DIR=~
APP_DIR=$ROOT_DIR/$NAME
LOG_DIR=$APP_DIR/log
LOG_PATH=$LOG_DIR/$NAME.log
FIRMWARE_PATH=/boot/firmware

ACTION=$1


# This script is idempotent.

strstr() { case $2 in *$1* ) return 0;; *) return 1;; esac ;}

# Initial sanity check that the hardware is supported, and prep info in case the kernel
# needs to be updated to support cec-gpio
RPI_MODEL=`cat /sys/firmware/devicetree/base/model`
if strstr "Raspberry Pi 4" "$RPI_MODEL" ||
    strstr "Raspberry Pi 3 Model B" "$RPI_MODEL" ||
    strstr "Raspberry Pi Zero 2 W" "$RPI_MODEL"; then
    KERNEL_ARCHIVE_URL="https://github.com/retsyx/amity-kernels/blob/main/kernel-6.6.51/kernel-6.6.51-v8-amity.zip?raw=true"
    KERNEL_IMG=kernel8.img
elif strstr "Raspberry Pi 5" "$RPI_MODEL"; then
    KERNEL_ARCHIVE_URL="https://github.com/retsyx/amity-kernels/blob/main/kernel-6.6.51/kernel-6.6.51-v8-16k-amity.zip?raw=true"
    KERNEL_IMG=kernel_2712.img
else
    echo "${RPI_MODEL} is not a known model (if it is older than a Raspberry Pi 3 Model B, it is not supported)"
    exit 1
fi

# Perform overall setup if not asked to perform a specific action

if [ -z ${ACTION} ]; then

# Install dependencies
sudo apt update
sudo apt install -y build-essential git libglib2.0-dev libbluetooth-dev python3-dev unzip vim
sudo apt install -y libavahi-compat-libdnssd-dev
sudo apt install -y bluez bluez-tools

# Prevent keyboard power keys from rebooting or shutting down the machine
if [ ! -f /etc/systemd/logind.conf.d/disable-power-key.conf ]; then
    sudo mkdir -p /etc/systemd/logind.conf.d/
    TEMP_CONF_PATH=`mktemp`
    chmod 644 $TEMP_CONF_PATH
cat > "$TEMP_CONF_PATH" << EOF
[Login]
HandlePowerKey=ignore
EOF
    sudo cp $TEMP_CONF_PATH /etc/systemd/logind.conf.d/disable-power-key.conf
    sudo systemctl restart systemd-logind
fi

# Add overlay to config.txt, if necessary
CONFIG_TXT_PATH="$FIRMWARE_PATH/config.txt"
if ! grep -q "cec-gpio" "$CONFIG_TXT_PATH"; then
    TEMP_CONFIG_TXT_PATH=`mktemp`
    cp "$CONFIG_TXT_PATH" "$TEMP_CONFIG_TXT_PATH"
    sudo cat >> "$TEMP_CONFIG_TXT_PATH" << EOF

dtoverlay=cec-gpio

EOF
        sudo fsck -y "$FIRMWARE_PATH" || true
        sudo mount "$FIRMWARE_PATH" --options remount,rw
        sudo cp "$CONFIG_TXT_PATH" "$CONFIG_TXT_PATH".$NAME.backup
        sudo cp "$TEMP_CONFIG_TXT_PATH" "$CONFIG_TXT_PATH"
        sudo mount "$FIRMWARE_PATH" --options remount,ro
fi

# App setup

cd "$ROOT_DIR"

if [ ! -d "$APP_DIR" ]; then
    git clone https://github.com/retsyx/amity $NAME
    # Setup a venv
    python -m venv "$APP_DIR"
else
    cd $APP_DIR
    git fetch && git rebase
    cd ..
fi

mkdir -p "$LOG_DIR"

cd "$APP_DIR"

# Create, and install cec-gpio overlay
DTB_NAME=cec-gpio.dtbo
DTB_DIR="$FIRMWARE_PATH/overlays"
DTB_PATH=$DTB_DIR/$DTB_NAME

if [ ! -f "$DTB_PATH" ]; then
    ./configure_gpio internal
fi

# Activate venv, and pip install requirements
. ./bin/activate
pip install --upgrade -r requirements.txt

# Clone, build, and install our custom version of bluepy3
cd "$ROOT_DIR"
if [ ! -d "$ROOT_DIR/bluepy3" ]; then
    git clone https://github.com/retsyx/bluepy3
else
    cd bluepy3
    git stash # cleanup bluepy3 build droppings
    git fetch && git rebase
    cd ..
fi

cd bluepy3
pip install .

cd "$APP_DIR"

# Warm up pycache
python -c "import bluepy3.btle, cec, config, gestures, hdmi, hdmi_tool, keyboard, messaging, pair_tool, remote, remote_adapter, tools"
rm cec.log || true

# Startup setup

RUN_PATH="$APP_DIR/bin/run-$NAME.sh"

cat > "$RUN_PATH" << EOF
#!/usr/bin/sh

cd "$APP_DIR"
. ./bin/activate

echo Running...
$APP_DIR/main.py
EOF

chmod +x "$RUN_PATH"

mkdir -p ~/.config/systemd/user

cat > ~/.config/systemd/user/$NAME.service << EOF
[Unit]
Description=$NAME HDMI-CEC controller

[Service]
ExecStart=$RUN_PATH
Restart=always
WorkingDirectory=$APP_DIR

[Install]
WantedBy=default.target
EOF

loginctl enable-linger

# Kernel setup
KERNEL_HAS_CEC_GPIO=`gunzip -c "$FIRMWARE_PATH/$KERNEL_IMG" | grep -c cec-gpio || true`

# If necessary, download, and install cec-gpio enabled kernel, and reboot
if [ "$KERNEL_HAS_CEC_GPIO" -eq "0" ]; then
    TEMP_KERNEL_ARCHIVE_PATH=`mktemp --suffix .zip`

    curl -L -o "$TEMP_KERNEL_ARCHIVE_PATH" "$KERNEL_ARCHIVE_URL"

    sudo fsck -y "$FIRMWARE_PATH" || true
    sudo mount "$FIRMWARE_PATH" --options remount,rw

    sudo unzip -o "$TEMP_KERNEL_ARCHIVE_PATH" -d /
    if [ $? -ne 0 ]; then
        echo "unzip ${TEMP_KERNEL_ARCHIVE_PATH} failed"
        exit 1
    fi

    BUILD="$(unzip -l ${TEMP_KERNEL_ARCHIVE_PATH} boot/vmlinuz-* | sed -n 's|^.*boot/vmlinuz-\(.*\)$|\1|p')"
    sudo update-initramfs -c -v -k "${BUILD}"
    echo "Rebooting..."
    sleep 5
    sudo shutdown -r now
fi

fi # End overall setup

cd "$APP_DIR"

if [ "$ACTION" = "enable" ]; then

    systemctl --user start "$NAME"
    systemctl --user enable "$NAME"

fi # "$ACTION" = "enable"

if [ "$ACTION" = "disable" ]; then

    systemctl --user stop "$NAME"
    systemctl --user disable "$NAME"

fi # "$ACTION" = "disable"

if [ "$ACTION" = "restart" ]; then

    systemctl --user restart "$NAME"

fi # "$ACTION" = "restart"
